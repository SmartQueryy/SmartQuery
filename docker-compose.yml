version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: smartquery-postgres
    environment:
      POSTGRES_USER: smartquery_user
      POSTGRES_PASSWORD: smartquery_dev_password
      POSTGRES_DB: smartquery
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartquery_user -d smartquery"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smartquery-network

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: smartquery-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - smartquery-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: smartquery-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: minio_dev_password123
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - smartquery-network

  # MinIO Client (for bucket creation)
  minio-setup:
    image: minio/mc:latest
    container_name: smartquery-minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minio_admin minio_dev_password123;
      /usr/bin/mc mb myminio/smartquery-files --ignore-existing;
      /usr/bin/mc policy set public myminio/smartquery-files;
      exit 0;
      "
    networks:
      - smartquery-network

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    container_name: smartquery-celery-worker
    command: celery -A celery_app worker --loglevel=info
    depends_on:
      - redis
      - postgres
      - minio
    environment:
      - DATABASE_URL=postgresql://smartquery_user:smartquery_dev_password@postgres:5432/smartquery
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio_admin
      - MINIO_SECRET_KEY=minio_dev_password123
      - MINIO_BUCKET_NAME=smartquery-files
    volumes:
      - ./backend:/app
    networks:
      - smartquery-network
    restart: unless-stopped

  # Celery Flower (monitoring)
  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.celery
    container_name: smartquery-celery-flower
    command: celery -A celery_app flower --port=5555
    depends_on:
      - redis
      - celery-worker
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    networks:
      - smartquery-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  smartquery-network:
    driver: bridge 
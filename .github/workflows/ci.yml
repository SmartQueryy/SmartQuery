name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  # Frontend Tests
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install
    
    - name: Run frontend type check
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Run frontend tests with coverage
      working-directory: ./frontend
      run: npm run test -- --coverage --watchAll=false
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        NEXT_PUBLIC_BACKEND_URL: ${{ secrets.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000' }}

  # Backend Tests
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements-dev.txt
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run code formatting check
      working-directory: ./backend
      run: black --check --diff .
    
    - name: Run import sorting check
      working-directory: ./backend
      run: isort --check-only --diff .
    
    - name: Run backend tests with coverage
      working-directory: ./backend
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term --cov-fail-under=75
        coverage report --fail-under=75
      env:
        TESTING: true
        DATABASE_URL: ${{ secrets.DATABASE_URL || 'sqlite:///test.db' }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: smartquery_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: test-access-key
          MINIO_ROOT_PASSWORD: test-secret-key
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements-dev.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Setup MinIO
      run: |
        # Wait for MinIO to be ready and create test bucket
        timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'
        # Install MinIO client
        curl -fsSL https://dl.min.io/client/mc/release/linux-amd64/mc -o mc
        chmod +x mc
        sudo mv mc /usr/local/bin/
        # Configure MinIO client
        mc alias set minio http://localhost:9000 test-access-key test-secret-key
        # Create test bucket
        mc mb minio/smartquery-files || echo "Bucket already exists"
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 15
      env:
        DATABASE_URL: postgresql://postgres:test@localhost:5432/smartquery_test
        REDIS_URL: redis://localhost:6379
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: test-access-key
        MINIO_SECRET_KEY: test-secret-key
        MINIO_BUCKET_NAME: smartquery-files
        MINIO_SECURE: "false"
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
        TESTING: true
    
    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:integration
      env:
        NEXT_PUBLIC_BACKEND_URL: http://localhost:8000
    
    - name: Health check
      run: |
        # Check backend API
        curl -f http://localhost:8000/health || exit 1
        
        # Check PostgreSQL
        pg_isready -h localhost -p 5432 -U postgres || exit 1
        
        # Check Redis
        redis-cli -h localhost -p 6379 ping || exit 1
        
        # Check MinIO
        curl -f http://localhost:9000/minio/health/live || exit 1
        
        echo "All services are healthy!"

  # Security Checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Frontend security audit
      working-directory: ./frontend
      run: |
        npm install
        npm audit --audit-level=high || echo "Security audit found issues but continuing..."
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install safety
      run: pip install safety
    
    - name: Backend security audit
      working-directory: ./backend
      run: safety check -r requirements-dev.txt || echo "Security audit found issues but continuing..." 